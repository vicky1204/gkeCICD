# Step 1: Build the Spring Boot JAR
- name: 'gcr.io/cloud-builders/mvn'
  args: ['clean', 'package', '-DskipTests']

# Step 2: Build Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/springboot-app', '.']

# Step 3: Push Docker image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/springboot-app']

# Step 4: Get GKE credentials (to use kubectl)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'gcloud'
  args:
    - 'container'
    - 'clusters'
    - 'get-credentials'
    - 'my-cluster'
    - '--zone'
    - 'us-central1-a'
    - '--project'
    - '$PROJECT_ID'

# Step 5: Apply Kubernetes manifests
- name: 'google/cloud-sdk:latest'
  entrypoint: 'sh'
  args:
    - -xe
    - -c
    - |
      gcloud deploy apply --file deploy/pipeline.yaml --region=us-central1
      gcloud deploy apply --file deploy/dev.yaml --region=us-central1
      
      gcloud deploy releases create 'app-release-${SHORT_SHA}' --delivery-pipeline=springboot-CICD--pipeline --region=us-central1 --from-k8s-manifest=./k8s/deployment.yml
      gcloud deploy releases create 'app-release-${SHORT_SHA}' --delivery-pipeline=springboot-CICD--pipeline --region=us-central1 --from-k8s-manifest=./k8s/service.yml

options:
  logging: CLOUD_LOGGING_ONLY

timeout: '1200s'